A Recipe Manager
Should provide the ability to browse recipes by different filters such as date created, ingredient count, rating, comments, whatever your domain provides. 
Additionally ingredients would need to be unique so that the first user that adds Chicken to their recipe would create the canonical (or atomic/unique/individual) instance of Chicken (the only row to ever have the name Chicken in the ingredients table). 
This will force a join model between ingredients and recipes and provide an easy way to group recipes by ingredients, which would be a great view to implement. 
Associating some user-centric data regarding recipes such as ratings or comments would further fill out the domain and provide some great learning experiences.


• Include at least one has_many, at least one belongs_to, and at least two has_many :through relationships
• Include a many-to-many relationship implemented with has_many :through associations. The join table must include a user-submittable attribute — that is to say, some attribute other than its foreign keys that can be submitted by the app's user

Your models must include reasonable validations for the simple attributes. (the models should defend against invalid data)

one class level ActiveRecord scope method. 

standard user authentication, including signup, login, logout, and passwords, as well as also allow login from some other service. Facebook, Twitter, Foursquare, Github, etc...

You must include and make use of a nested resource with the appropriate RESTful URLs.
• You must include a nested new route with form that relates to the parent resource
• You must include a nested index or show route

Your forms should correctly display validation errors.
a. Your fields should be enclosed within a fields_with_errors class
b. Error messages describing the validation failures must be present within the view.

Your application must be, within reason, a DRY (Do-Not-Repeat-Yourself) rails app.
• Logic present in your controllers should be encapsulated as methods in your models.
• Your views should use helper methods and partials when appropriate.
• Follow patterns in the Rails Style Guide and the Ruby Style Guide.

Do not use scaffolding to build your project. Your goal here is to learn. Scaffold is a way to get up and running quickly, but learning a lot is not one of the benefits of scaffolding.